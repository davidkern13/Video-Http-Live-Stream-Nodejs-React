import { useEffect, useState, useRef } from 'react';
import videoTest from './mov_bbb.mp4';

function Test() {

  const imgArray = useRef({});
  const [finish, setFinish] = useState(false);

  useEffect(() => {
    showImageAt(0);
  }, []);

  function getVideoImage(path, sec, callback) {
    var me = this, video = document.createElement('video');
    var type = 'image/jpeg';
    var quality = 0.7;
    video.onloadedmetadata = function () {
      const duration = parseInt(this.duration);
      if ('function' === typeof sec) {
        sec = sec(duration);
      }
      this.currentTime = Math.min(Math.max(0, (sec < 0 ? duration : 0) + sec), duration);
    };
    video.onseeked = function (e) {
      var canvas = document.createElement('canvas');
      canvas.height = video.videoHeight / 4;
      canvas.width = video.videoWidth / 4;
      var ctx = canvas.getContext('2d');
      ctx.scale(1, 1);
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      var img = new Image();
      img.src = canvas.toDataURL(type, quality);
      callback.call(me, img, this.currentTime, e);
      canvas = null;
      img = null;
    };
    video.onerror = function (e) {
      callback.call(me, undefined, undefined, e);
    };
    video.src = path;
  }

  const showImageAt = (sec) => {
    let duration;

    const dataTime = (totalTime) => {
      duration = totalTime;
      return sec;
    }

    const createImagesList = (img, sec, event) => {
      if (event.type === 'seeked') {
        imgArray.current[sec] = img.src;
        if (duration >= ++sec) {
          showImageAt(sec);
        } else {
          setFinish(true);
        }
      }
    }

    getVideoImage(videoTest, dataTime, createImagesList);
  }

  return (
    <>
      <video width="400" controls>
        <source src={videoTest} type="video/mp4" />
        Your browser does not support HTML5 video.
      </video>

      <p>These are the frames' images generated by getVideoImage():</p>
      <ol id="olFrames"></ol>

      {
        finish && Object.keys(imgArray.current).map((img, inx) => {
          return (
              <li key={inx}>
                {<img src={imgArray.current[img]} />}
              </li>
           )
        })
      }
      </>);
}

export default Test;